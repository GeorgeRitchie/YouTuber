// <auto-generated />
using System;
using Core.Downloader.Module.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Downloader.Module.Data.Migrations
{
    [DbContext(typeof(DownloaderDbContext))]
    [Migration("20240503105256_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("downloader")
                .HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Core.Downloader.Module.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTubeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("media_files", "downloader");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.MediaStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MediaFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("SizeInBytes")
                        .HasColumnType("REAL");

                    b.Property<string>("StreamType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId")
                        .IsUnique();

                    b.ToTable("media_streams", "downloader");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.PlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTubeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("playlists", "downloader");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.ScheduledDownload", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadingType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("scheduled_downloads", "downloader");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.MediaFile", b =>
                {
                    b.HasOne("Core.Downloader.Module.Entities.ScheduledDownload", "Schedule")
                        .WithOne("MediaFile")
                        .HasForeignKey("Core.Downloader.Module.Entities.MediaFile", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Downloader.Module.ValueObjects.Thumbnail", "Thumbnail", b1 =>
                        {
                            b1.Property<Guid>("MediaFileId")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("Image")
                                .IsRequired()
                                .HasColumnType("BLOB");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("MediaFileId");

                            b1.ToTable("media_files", "downloader");

                            b1.WithOwner()
                                .HasForeignKey("MediaFileId");
                        });

                    b.Navigation("Schedule");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.MediaStream", b =>
                {
                    b.HasOne("Core.Downloader.Module.Entities.MediaFile", "MediaFile")
                        .WithOne("Stream")
                        .HasForeignKey("Core.Downloader.Module.Entities.MediaStream", "MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.PlayList", b =>
                {
                    b.HasOne("Core.Downloader.Module.Entities.ScheduledDownload", "Schedule")
                        .WithOne("PlayList")
                        .HasForeignKey("Core.Downloader.Module.Entities.PlayList", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Downloader.Module.ValueObjects.Thumbnail", "Thumbnail", b1 =>
                        {
                            b1.Property<Guid>("PlayListId")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("Image")
                                .IsRequired()
                                .HasColumnType("BLOB");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("PlayListId");

                            b1.ToTable("playlists", "downloader");

                            b1.WithOwner()
                                .HasForeignKey("PlayListId");
                        });

                    b.Navigation("Schedule");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.ScheduledDownload", b =>
                {
                    b.OwnsOne("Core.Downloader.Module.Entities.Timing", "Timing", b1 =>
                        {
                            b1.Property<Guid>("ScheduledDownloadId")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly?>("EndDate")
                                .HasColumnType("TEXT");

                            b1.Property<TimeOnly?>("EndTime")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly?>("StartDate")
                                .HasColumnType("TEXT");

                            b1.Property<TimeOnly?>("StartTime")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ScheduledDownloadId");

                            b1.ToTable("scheduled_downloads", "downloader");

                            b1.WithOwner()
                                .HasForeignKey("ScheduledDownloadId");
                        });

                    b.Navigation("Timing")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.MediaFile", b =>
                {
                    b.Navigation("Stream")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Downloader.Module.Entities.ScheduledDownload", b =>
                {
                    b.Navigation("MediaFile")
                        .IsRequired();

                    b.Navigation("PlayList");
                });
#pragma warning restore 612, 618
        }
    }
}
